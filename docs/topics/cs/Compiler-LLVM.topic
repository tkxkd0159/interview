<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="LLVM" id="Compiler-LLVM">

    <chapter title="Existing problems">
        기존에 존재하던 많은 Compiler들이 실제로 Three-Phase Compiler 형태를 잘 따르지 못하고 monolithic하게 구현되었다. Glasgow Haskell Compiler 같은 경우
        특정 source language에만 호환가능하게 설계되었고
        Python, Java, Pearl 같은 경우 LLVM이 설계될 당시 공유되는 코드 없이 retargetable하게 설계되지 않았다. 아래는 이런 구조속에서 그나마 성공적인 케이스들.
        <list>
            <li><b>Java &amp; .NET</b>: 어떤 front language라도 이들이 지원하는 bytecode format으로만 변환시키면 이들이 제공하는 Optimizer, JIT
                compiler를 사용 가능.
                문제점은 특정 런타임으로 강제가 필요하다는 것인데 이로 인해 C같은 언어와 궁합이 안좋음.
            </li>
            <li><b>Transfiling</b>: 다른 언어를 C로 트랜스파일링한 후 이를 C compiler에 넣는 방법. 단, 디버깅이 까다로울 수 있고 컴파일 속도 느림. C에서 지원하지 않는
                기능은 상위 언어에서 구현해도 적용하기 어려움.
            </li>
            <li><b>GCC</b>: 여러 frontend와 backend를 지원하지만 각각의 구현을 모듈처럼 뽑아쓰기는 어려움. Frontend 부문만 쓰고 싶어도 tightly coupled라 GCC
                전체를 써서 원하는 작업을 해야함.
            </li>
        </list>
    </chapter>

    <chapter title="LLVM Implementation of Three-Phase Design">
        <img src="$WRS_MODULE$/images/dev/compiler/LLVMCompiler1.png" alt="llvm"/>
        <p>
            The most important aspect of its design is the LLVM Intermediate Representation (IR), which is the form it
            uses to represent code in the compiler.
            LLVM IR is designed to host mid-level analyses and transformations that you find in the optimizer section of
            a compiler.
            LLVM IR is a low-level RISC-like virtual instruction set. Like a real RISC instruction set, it supports
            linear sequences of simple instructions like add, subtract, compare, and branch.
        </p>
        <p>
            In an LLVM-based compiler, a frontend is responsible for parsing, validating and diagnosing errors in the
            input code,
            then translating the parsed code into LLVM IR (usually, but not always, by building an AST and then
            converting the AST to LLVM IR).
            This IR is optionally fed through a series of analysis and optimization passes which improve the code,
            then is sent into a code generator to produce native machine code
        </p>
        <p>
            LLVM IR is actually defined in three isomorphic forms: the textual format (<code>.ll</code>), an in-memory
            data structure inspected and modified by optimizations themselves, and an efficient and dense on-disk binary
            "bitcode" format (<code>.bc</code>).
            The LLVM Project also provides tools to convert the on-disk format from text to binary:
            <code>llvm-as</code> assembles the textual <code>.ll</code> file into a <code>.bc</code> file containing the
            bitcode goop
            and <code>llvm-dis</code> turns a <code>.bc</code> file into a <code>.ll</code> file.
        </p>

        <chapter title="Optimization">
            <p>
                LLVM IR can be efficiently (de)serialized to/from a binary format known as LLVM bitcode.
                Since LLVM IR is self-contained, and serialization is a lossless process, we can do part of compilation,
                save our progress to disk, then continue work at some point in the future. This feature provides a
                number of interesting capabilities including support for link-time and install-time optimization, both
                of which delay code generation from "compile time".
            </p>
            <p>

                Link-Time Optimization (LTO) addresses the problem where the compiler traditionally only sees one
                translation unit (e.g.,
                <code>.c</code> file with all its headers) at a time and therefore cannot do optimizations (like
                inlining) across file boundaries.
                LLVM compilers like Clang support this with the <code>-flto</code> or <code>-O4</code> command line
                option. This option instructs the compiler to emit LLVM bitcode to the
                <code>.o</code> file instead of writing out a native object file, and delays code generation to link
                time. it reads all the bitcode files into memory, links them together, then runs the LLVM optimizer over
                the aggregate. Since the optimizer can now see across a much larger portion of the code, it can inline,
                propagate constants, do more aggressive dead code elimination, and more across file boundaries.
            </p>
                <img src="$WRS_MODULE$/images/dev/compiler/LTO.png" alt="Link-Time Optimization"/>
            <p>
                Install-time optimization is the idea of delaying code generation even later than link time, all the way
                to install time. Install time is a very interesting time (in cases when software is shipped in a box,
                downloaded, uploaded to a mobile device, etc.), because this is when you find out the specifics of the
                device you're targeting. In the x86 family for example, there are broad variety of chips and
                characteristics. By delaying instruction choice, scheduling, and other aspects of code generation, you
                can pick the best answers for the specific hardware an application ends up running on.
            </p>
                <img src="$WRS_MODULE$/images/dev/compiler/ITO.png" alt="Install-Time Optimization"/>
        </chapter>

        <chapter title="Cross-Language Compile">
            LLVM의 특성을 활용해 여러 언어가 섞인 코드도 LTO가 가능하게 할 수 있다. 단, LLVM version을 맞춰줘야 함 (<code>clang -v</code>, <code>rustc -vV</code> etc.).
            <code>rustc</code> emitting optimized LLVM bitcode and the LLVM linker plugin incorporating that into the LTO process with the rest of the modules:
            <code-block lang="text">
                .c --clang--> .bc --LLVM--> .bc (opt) ---------+
                                                               |
                .c --clang--> .bc --LLVM--> .bc (opt) ---------+
                                                               |
                                                               +-ld+LLVM--> bin
                .rs --+                                        |
                      |                                        |
                .rs --+--rustc--> .bc --LLVM--> .bc (opt) -----+
                      |
                .rs --+
            </code-block>
            <code-block lang="shell">
                # Compile the Rust static library, called "xyz"
                rustc --crate-type=staticlib -O -C opt-level=3 -C linker-plugin-lto -o libxyz.a lib.rs

                # Compile the C code with "-flto"
                clang -flto=thin -c -O3 main.c

                # Link everything
                clang -flto=thin -fuse-ld=lld -L . -lxyz -O3 main.o -o main
            </code-block>
        </chapter>
    </chapter>
    <seealso>
        <category ref="refs">
            <a href="https://aosabook.org/en/v1/llvm.html">LLVM Architecture</a>
        </category>
        <category ref="diy">
            <a href="https://github.com/tkxkd0159/interview/tree/main/examples/optimization/xlang">Cross-Language LTO Lab</a>
        </category>
    </seealso>
</topic>