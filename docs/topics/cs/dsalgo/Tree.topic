<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="Tree"
       title="Tree"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

  <show-structure depth="2"/>

  <chapter id="binary_tree" title="Binary Tree">
    <list>
      <li>Full Binary Tree: Every node has either 0 or 2 children</li>
      <li>Complete Binary Tree: All levels fully filled except possibly the last, which is filled from left to right</li>
      <li>Perfect Binary Tree: All internal nodes have 2 children, and all leaf nodes are at the same level</li>
    </list>
  </chapter>

  <chapter id="binary_search_tree" title="Binary Search Tree">
    <p>
      Ordered/Sorted Binary Tree. Left subtree are smaller than right subtree.
    </p>

    <chapter id="search_range" title="Search Range">
      <code-block collapsed-title="Example" collapsible="true" lang="go" src="$WRS_MODULE$/code/dsalgo/bst-range.go"></code-block>

    </chapter>

    <chapter id="bst_based_set" title="BST-based Set">

    </chapter>

    <chapter id="bst_based_map" title="BST-based Map">

    </chapter>
  </chapter>

  <chapter id="heap" title="Heap">
    <p>
      Priority Queue. Heap properties
    </p>

    <p>
      Push and Pop
    </p>

    <p>
      <code>Heapify</code> is the process of creating a heap data structure from a binary tree.
    </p>

    <chapter id="two_heaps" title="Two Heaps">

    </chapter>
  </chapter>

  <chapter id="trie" title="Trie">
    <p>
      Prefix Tree / Digital Tree. Used for searching strings.
    </p>

  </chapter>

  <chapter id="union_find" title="Union-Find">
    <p>
      Disjoint Set. Used for finding connected components in a graph.
    </p>
  </chapter>

  <chapter id="segment_tree" title="Segment Tree">

  </chapter>
</topic>
