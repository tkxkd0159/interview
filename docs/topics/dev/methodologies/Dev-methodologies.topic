<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic id="Dev-methodologies"
       title="Dev Methodologies"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd">

  <show-structure depth="3"/>


  <chapter title="Object-oriented Programming(OOP)">
    <chapter title="Features">
      <deflist>
        <def title="Abstraction">Separate interface and implementation. In other words, it hides complicate internal logic and client
          implement their logic based on interface.
        </def>
        <def title="Encapsulation">Do not allow to access properties directly. Combining the properties of an object with the behavior of
          using them(private property, setter, getter)
          <code-block collapsible="true" lang="java">
                        class Citizen:
                        drinking_age = 19

                        def __init__(self, name, age, resident_id):
                        self.name = name
                        self.__age = age
                        self.__resident_id = resident_id

                        def authenticate(self, id_field):
                        return self.__resident_id == id_field

                        def can_drink(self):
                        return self.__age >= Citizen.drinking_age

                        def __str__(self):
                        return self.name + "is" + str(self.__age) + "old"

                        young = Citizen("random", 18, "87654321")
                        print(young.__str__())
                        print(young.__authenticate("87654321")) Error
                    </code-block>
        </def>
        <def title="Inheritance">
          <list>
            <li><b>Method overloading:</b> the method name are same but parameters are different.</li>
            <li><b>Method overriding:</b> Same method name, parameters but different logic</li>
          </list>
          <code-block collapsible="true" lang="java">
                        class Parent {

                            void display() { System.out.println("Parent class: display()"); }

                        }

                        class Child extends Parent {
                            void display() { System.out.println("Child class: display()"); } // Override
                            void display(String str) { System.out.println(str); } // Overload
                        }

                        public class Inheritance06 {
                            public static void main(String[] args) {
                            Child ch = new Child();
                            ch.display();
                            ch.display("");
                            }
                        }
                    </code-block>
        </def>
        <def title="Polymorphism">The property of allowing each element of a programming language (constants, variables, objects, methods,
          etc.) to belong to various data types. In general, in OOP, polymorphism refers to the fact that one object can have multiple data
          types.
          Below is an example of the method. The internal logic of the <code>StringValue()</code> varies depending on the data type to which
          it is connected. In other words, it belongs to various data types. The monomorphism approach requires implementing a separately
          named function for each transformation.
          <code-block>
                        // monomorphism
                        string = StringFromNumber(number);
                        string = StringFromDate(date);

                        // polymorphism
                        string = number.StringValue();
                        string = date.StringValue();
                    </code-block>
        </def>
      </deflist>
    </chapter>

    <chapter title="SOLID design">
      <deflist>
        <def title="Single Responsibility Principle">단일 책임 원칙은 같이 수정해야될 것들은 묶고, 따로 수정해야될 것들은 분리하는 것. 즉, 모든 클래스는 단 한가지 책임만을 가지고 클래스 안에 정의되어
          있는 모든 기능은 이 하나의 책임을 수행하는 데 집중해야 함.
          <code-block collapsible="true" lang="python">
                    class Ship:
                        def __init__(self, fuel, fuel_per_hour, num_crew):
                            self.fuel_tank = FuelTank(fuel)
                            self.crew_manager = CrewManager(num_crew)
                            self.engine = Engine(self.fuel_tank, fuel_per_hour)


                    class FuelTank:
                        def __init__(self, fuel):
                            self.fuel = fuel

                        def load_fuel(self, amount):
                            self.fuel += amount

                        def use_fuel(self, amount):
                            if self.fuel - amount >= 0:
                                self.fuel -= amount
                                return True
                            print("running out of fuel!")
                            return False

                        def report_fuel(self):
                            print("Current fuel remaining is {}L".format(self.fuel))

                    class Engine:
                        def __init__(self, fuel_tank, fuel_per_hour):
                            self.fuel_tank = fuel_tank
                            self.fuel_per_hour = fuel_per_hour

                        def run_for_hours(self, hours):
                            if self.fuel_tank.use_fuel(self.fuel_per_hour * hours):
                                print("Operating the engine for {} hours".format(hours))
                                return True
                            print("The engine cannot be started because it is low on fuel")
                            return False

                    class CrewManager:
                        def __init__(self, num_crew):
                            self.num_crew = num_crew

                        def load_crew(self, number):
                            self.num_crew += number

                        def report_crew(self):
                            print("There are currently {} crew members".format(self.num_crew))
                </code-block>
        </def>
        <def title="Open-Closed Principle">
          클래스는 확장에는 열려있어야 되고 수정에는 닫혀있어야 함. 즉, 새로운 코드를 작성해서 기존 기능을 확장할 수는 있지만 기존 한번 작성한 코드는 바꿀 필요는 없는 상황을 만들어야 함. 아래 예시를 보면
          <code>Triangle</code> 을 새롭게 구현할 때 기존의 <code>Shape</code>, <code>Circle</code>, <code>Rectangle</code> 의 코드를 변경할 필요 없음.
          <code-block collapsible="true" lang="java">
                        // Base class
                        abstract class Shape {
                            abstract double calculateArea();
                        }

                        // Concrete class
                        class Circle extends Shape {
                            private double radius;
때
                            Circle(double radius) {
                                this.radius = radius;
                            }

                            @Override
                            double calculateArea() {
                                return Math.PI * radius * radius;
                            }
                        }

                        // Another concrete class
                        class Rectangle extends Shape {
                            private double width;
                            private double height;

                            Rectangle(double width, double height) {
                                this.width = width;
                                this.height = height;
                            }

                            @Override
                            double calculateArea() {
                                return width * height;
                            }
                        }

                        // New concrete class
                        class Triangle extends Shape {
                            private double base;
                            private double height;

                            Triangle(double base, double height) {
                                this.base = base;
                                this.height = height;
                            }

                            @Override
                            double calculateArea() {
                                return 0.5 * base * height;
                            }
                        }


                    </code-block>
        </def>
        <def title="Liskov Substitution Principle"><p>
          부모 클래스의 인스턴스를 사용하는 위치에 자식 클래스의 인스턴스를 대신 사용했을 때 코드가 원래 의도대로 작동해야 한다. 새로 정의하는 메소드가 아닌 상속된 메소드는 왠만하면 그대로 쓸 수 있게 설계돼야 함 (새로운 정의가 아닌
          확장의 개념으로 상속).
          아래는 리스코프 치환 원칙을 위반한 2가지 예시
        </p>
          <list>
            <li>
              자식 클래스가 부모 클래스의 변수의 타입을 바꾸거나 메소드의 파라미터 또는 타입/갯수를 바꾸는 경우
              <code-block collapsible="true" lang="python">
                                class Employee:
                                    company_name = "Macdonalds"
                                    raise_percentage = 1.03

                                    def __init__(self, name, wage):
                                        self.name = name
                                        self._wage = wage

                                    def raise_pay(self):
                                        self._wage *= self.raise_percentage

                                    @property
                                    def wage(self):
                                        return self._wage

                                    def __str__(self):
                                        return Employee.company_name + " 직원: " + self.name


                                class Cashier(Employee):
                                    """리스코프 치환 원칙을 지키지 않는 계산대 직원 클래스"""
                                    burger_price = 4000

                                    def __init__(self, name, wage, number_sold=0): # 파라미터 개수 달라짐
                                        super().__init__(name, wage)
                                        self.number_sold = number_sold

                                    def raise_pay(self, raise_amount):             # 파라미터 개수 달라짐
                                        self.wage += self.raise_amount

                                    @property
                                    def wage(self):
                                        return "시급 정보를 알려줄 수 없습니다"
                            </code-block>
            </li>
            <li>
              자식 클래스가 부모 클래스의 의도와 다르게 메소드를 오버라이딩 하는 경우
              <code-block collapsible="true" lang="python">
                                class Rectangle:

                                    def __init__(self, width, height):
                                        self.width = width
                                        self.height = height

                                    def area(self):
                                        return self.width * self.height

                                    @property
                                    def width(self):
                                        return self._width

                                    @width.setter
                                    def width(self, value):
                                        self._width = value if value > 0 else 1

                                    @property
                                    def height(self):
                                        return self._height

                                    @height.setter
                                    def height(self, value):
                                        self._height = value if value > 0 else 1

                                class Square(Rectangle):
                                    def __init__(self, side):
                                        super().__init__(side, side)

                                    @property
                                    def width(self):
                                        return self._width

                                    @width.setter
                                    def width(self, value):
                                        self._width = value if value > 0 else 1
                                        self._height = value if value > 0 else 1

                                    @property
                                    def height(self):
                                        return self._height

                                    @height.setter
                                    def height(self, value):
                                        self._width = value if value > 0 else 1
                                        self._height = value if value > 0 else 1
                            </code-block>
            </li>
          </list>
        </def>
        <def title="Interface Segregation Principle"><p>
          인터페이스는 추상클래스와 비슷하지만 다름. 추상 클래스 안에는 일반 메소드도 선언할 수 있고 이건 자식클래스에서 무조건 구현하지 않고 그대로 상속받아도 되지만 인터페이스는 꼭 지켜야하는 규약이라 무조건 해당 규칙대로 구현해야 함.
          인터페이스 분리 원칙은 클래스가 사용하지 않을 메소드에 의존할 것을 강요하면 안 되는것. 따라서 인터페이스는 기능이나 역할별로 쪼갤 수 있으면 쪼개는 게 좋음
        </p>
          <list>
            <li>
              아래에서 메모는 <code>send</code> 기능이 필요없는데도 불구하고 추상메소드(인터페이스)에 의해 구현을 강요당함. 따라서 이런 상황이 발생하지 않게 인터페이스를 더 잘게 쪼개야 함.
              /
              <code-block collapsible="true" lang="python">
                            from abc import ABC, abstractmethod


                            class IMessage(ABC):
                                @property
                                @abstractmethod
                                def content(self):
                                    pass

                                @abstractmethod
                                def edit_content(self, new_content: str) -> None:
                                    pass

                                @abstractmethod
                                def send(self, destination: str) -> bool:
                                    pass

                            class Email(IMessage):
                                def __init__(self, content, owner_email):
                                self._content = content
                                self.owner_email = owner_email

                                @property
                                def content(self):
                                    return self._content

                                def edit_content(self, new_content):
                                    self._content = self.owner_email + "님의 메일\n" + new_content

                                def send(self, destination):
                                    print("{}에서 {}로 이메일 전송!\n내용: {}").format(self.owner_email, destination, self._content)
                                    return True


                            class Memo(IMessage):
                                def __init__(self, content):
                                    self._content = content

                                @property
                                def content(self):
                                    return self._content

                                def edit_content(self, new_content):
                                    self._content = new_content

                                def send(self, destination):
                                    """You can't not send memo"""
                                    return False

                                class TextReader:

                                def __init__(self):
                                    self.texts = []

                                def add_text(self, text: IMessage):
                                    self.texts.append(text)

                                def read_all_texts(self):
                                    for text in self.texts:
                                    print(text.content)
                            </code-block>
            </li>
            <li>
              아래는 기능에 따라 인터페이스를 분리한 예시
              <code-block collapsible="true" lang="python">
                                from abc import ABC, abstractmethod

                                class IPrinter(ABC):
                                    @abstractmethod
                                    def print_file(self, file:str) -> bool:
                                        pass


                                class IScanner(ABC):
                                    @abstractmethod
                                    def scan(self, content:str) -> bool:
                                        pass

                                class SamsungPrinter(IPrinter, IScanner):
                                    def __init__(self, has_ink, has_paper, is_connected):
                                        self.has_ink = has_ink
                                        self.has_paper = has_paper
                                        self.is_connected = is_connected

                                    def print_file(self, file):
                                        if self.has_ink and self.has_paper and self.is_connected:
                                            print("문서 {}을/를 출력 중입니다!".format(file))
                                            return True
                                        return False

                                    def scan(self, content):
                                        if self.is_connected:
                                            print("{}을/를 이미지 파일로 저장합니다.".format(content))
                                            return True
                                        return False


                                class LGPrinter(IPrinter):
                                    def __init__(self, has_ink, has_paper, is_connected):
                                        self.has_ink = has_ink
                                        self.has_paper = has_paper
                                        self.is_connected = is_connected

                                    def print_file(self, file):
                                        if self.has_ink and self.has_paper and self.is_connected:
                                            print("문서 {}을/를 출력합니다.".format(file))
                                            return True
                                        return False

                                samsung_printer = SamsungPrinter(True, True, True)
                                lg_printer = LGPrinter(True, True, True)

                                samsung_printer.print_file("4월 보고서.docx")
                                lg_printer.print_file("4월 보고서.docx")

                                samsung_printer.scan("스캔 테스트 문서")

                                print(SamsungPrinter.mro())
                                print(LGPrinter.mro())
                            </code-block>
            </li>
          </list>
        </def>
        <def title="Dependency Inversion Principle">
          <p> 의존 관계 역전 원칙은 상위 모듈이 하위 모듈을 사용할 때 직접 인스턴스를 가져다가 쓰지 말라는 뜻이다. 왜냐하면 인스턴스를 바로 가져다가 쓴다는 말은
            하위 모듈의 구체적인 내용에 상위 모듈이 의존하게 되어 하위 모듈에 변화가 있을 때마다 상위 모듈의 코드를 바꿔줘야 하기 때문이다.
            이에 대한 해결책은 추상 클래스(or 인터페이스)로 상위 모듈과 하위 모듈 사이에 추상화 레이어를 만드는 것. 이렇게 할 경우 상위 모듈에는 추상 클래스의 자식 클래스의
            인스턴스를 사용한다는 가정 하에 코드를 작성해두면 되고 하위 모듈은 추상 클래스의 추상 메소드(또는 인터페이스)들을 구현만 하면 된다.
            의존 관계 역전 원칙은 개방-폐쇄 원칙을 지키기 위한 하나의 방법으로도 볼 수 있다. 이 원칙은 <code>Dependency injection</code> 이랑 묶여서 잘 사용됨(유지보수와 테스트 쉬워짐)</p>

          <p>
            아래는 구현 예시. <code>SwitchController</code> 가 직접 <code>LampSwitch</code> 를 파라미터로 사용하는 것이 아니라 <code>Switchable</code> 이라는 인터페이스를 매개
            삼아서 사용함. 따라서 이후 인터페이스대로 구현된 <code>BulbSwitch</code> 도 상위 모듈 변경없이 바로 사용 가능.
          </p>
          <code-block collapsible="true" lang="java">
                        // Low-level module
                        class LampSwitch {
                            void turnOn() {
                                System.out.println("Light is ON");
                            }

                            void turnOff() {
                                System.out.println("Light is OFF");
                            }
                        }

                        // Abstraction (Interface)
                        interface Switchable {
                            void turnOn();

                            void turnOff();
                        }

                        // High-level module
                        class SwitchController {
                            private Switchable device;

                            // Constructor injection to set the dependency
                            SwitchController(Switchable device) {
                                this.device = device;
                        }

                            void turnOnDevice() {
                                device.turnOn();
                            }

                            void turnOffDevice() {
                                device.turnOff();
                            }
                        }

                        // Concrete implementation of Switchable
                        class BulbSwitch implements Switchable {
                            @Override
                            public void turnOn() {
                                System.out.println("Light is ON");
                            }

                            @Override
                            public void turnOff() {
                                System.out.println("Light is OFF");
                            }
                        }
                    </code-block>
        </def>
      </deflist>
    </chapter>
  </chapter>
  <chapter title="Aspect Oriented Programming(AOP)">

  </chapter>
</topic>
