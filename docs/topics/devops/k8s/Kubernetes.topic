<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Kubernetes" id="Kubernetes">

    <chapter title="k8s API structure" id="k_8_s_api_structure">
        <p>
            <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md">API
                Conventions</a></p>
        <p>
            <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/">API Reference</a>
        </p>

    </chapter>
    <chapter title="Control/Data Plane" id="control_data_plane">
        <code-block lang="text">
            +----------------------+
            |      Master Node     |
            |----------------------|
            |  API Server          |
            |  etcd                |
            |  Controller Manager  |
            |  Scheduler           |
            +----------------------+
                        |
                        |
            +----------------------+    +----------------------+
            |     Worker Node 1    |    |     Worker Node 2    |
            |----------------------|    |----------------------|
            |  Kubelet             |    |  Kubelet             |
            |  Kube-proxy          |    |  Kube-proxy          |
            |  Container Runtime   |    |  Container Runtime   |
            |  Pods                |    |  Pods                |
            +----------------------+    +----------------------+
        </code-block>

        <code-block lang="text">
            +-----------------------+        +-----------------------+
            |     Cluster 1         |        |     Cluster 2         |
            |-----------------------|        |-----------------------|
            |  Master Node          |        |  Master Node          |
            |  Worker Nodes         |        |  Worker Nodes         |
            |  Services/Pods        |        |  Services/Pods        |
            +-----------------------+        +-----------------------+
                    |                              |
                    +------------------------------+
                    |
                    +----------------+----------------+
                    |  Multi-Cluster Management Tool  |
                    |  (e.g., KubeFed, Istio, etc.)   |
                    +---------------------------------+
        </code-block>
        <p>
            <b>The control plane</b> is the "brains" of Kubernetes(a.k.a. master node). It makes decisions about the cluster's state, such as which pods should run on
            which nodes, how to scale applications, and how to recover from failures. It also exposes the Kubernetes API, which allows users
            and external systems to interact with the cluster.
        </p>

        <list>
            <li><b>kube-apiserver</b>: The API server is the front end for the Kubernetes control plane. It handles requests
                from users and other
                components, validates them, and forwards them to the appropriate controller.
            </li>
            <li><b>etcd</b>: A consistent and highly-available key-value store used as Kubernetes' backing store for all
                cluster data.
            </li>
            <li><b>kube-scheduler</b>: This component watches for newly created pods with no assigned node and selects a node
                for them to run on.
            </li>
            <li><b>kube-controller-manager</b>: This component runs controller processes that regulate the state of the
                cluster.
            </li>
            <li><b>cloud-controller-manager</b>: A Kubernetes control plane component that embeds cloud-specific control logic.
                The cloud controller manager lets you link your cluster into your cloud provider's API, and separates
                out the components that interact with that cloud platform from components that only interact with your
                cluster.
            </li>
        </list>

        <p>
            <b>The data plane</b> is the "body" of Kubernetes(a.k.a. worker node). It consists of the nodes where containerized applications run. The data plane is
            responsible for executing the decisions made by the control plane, such as starting and stopping pods, monitoring their health,
            and providing networking and storage resources.
        </p>

        <list>
            <li><b>kubelet</b>: An agent that runs on each node in the cluster. It communicates with the control plane and is responsible for
                managing the pods running on its node.
            </li>
            <li><b>kube-proxy</b>: A network proxy that runs on each node in the cluster. It maintains network rules on nodes, allowing network
                communication to your Pods from network sessions inside or outside of your cluster.
            </li>
            <li><b>Container runtime</b>: The software that is responsible for running containers. Kubernetes supports several container runtimes,
                including Docker, containerd, and CRI-O.
            </li>
        </list>

        <p>The control plane and data plane work together in a loop:</p>
        <list>
            <li>The control plane makes decisions about the desired state of the cluster.</li>
            <li>The control plane sends instructions to the data plane to implement those decisions.</li>
            <li>The data plane executes the instructions and reports back to the control plane.</li>
            <li>The control plane monitors the state of the cluster and makes further decisions as needed.</li>
        </list>
        <p>This continuous loop ensures that the cluster remains in the desired state, even in the face of failures or
            changes in workload.</p>
    </chapter>

    <chapter title="Controller" id="controller">
        <note>While all Operators are controllers, not all controllers are Operators</note>

        <p>
            A controller is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting
            to move the current state towards the desired state. In other words, The desired state is expressed by
            creating/deleting/updating objects in the apiserver, and it's the job of the controllers to ensure that the observed state
            matches the desired state.
        </p>
        Examples of controllers that ship with Kubernetes include:
        <list>
            <li>Replication controller: Ensures that the number of replicas defined for a pod matches the number currently deployed in the
                cluster.
            </li>
            <li>Namespace controller: Creates the initial resources in a namespace when it is created.</li>
            <li>ServiceAccounts controller: Creates default ServiceAccounts in new namespaces.</li>
            <li>Node controller: Responsible for noticing and responding when nodes go down.</li>
            <li>Job controller: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.
            </li>
        </list>

        <p>
            You can also write your own <b>custom controllers (or operators)</b> to automate tasks specific to your applications. For
            example, you might have a custom controller that scales a stateful application based on custom metrics not directly available to
            the built-in Kubernetes Horizontal Pod Autoscaler. In general, a controller uses apiserver to figure out what state the cluster
            is currently in (a.k.a. observed state) and then makes changes to move the cluster towards the desired state. This
            process is often referred to as <a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/reconcile#Reconciler">reconciliation</a>,
            and one run of this loop is a <b>"reconciliation loop" or "reconciliation
            run"</b>.
        </p>

        <p>
            An <i>Operator</i> is a pattern for extending the Kubernetes API that was developed by CoreOS in 2016. It includes one or more
            custom resources and a controller which manages those resources. The Operator pattern aims to capture the key aim of a human
            operator
            who is managing a service or set of services. In essence, an Operator is a way of building a custom controller and packaging it
            with the <i>CRDs (Custom Resource Definitions)</i> that the controller watches. It's a higher level concept that uses
            controllers as building blocks.
        </p>
        <p>
            For example, a Prometheus Operator creates, configures, and manages Prometheus monitoring instances. It includes a custom
            resource (the Prometheus server) and a custom controller. The controller watches for changes to Prometheus custom resources,
            then creates, updates, or deletes Prometheus instances as needed.
        </p>
    </chapter>
</topic>