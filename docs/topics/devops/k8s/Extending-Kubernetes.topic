<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Extending Kubernetes " id="Extending-Kubernetes">

    <chapter title="Custom Resource" id="custom_resource">

        <p>
            In Kubernetes, a Custom Resource (CR) is an extension of the Kubernetes API that stores and retrieves
            structured data.
            When you create a Custom Resource, you are adding a new endpoint in your Kubernetes API that allows you to manage
            custom objects.

            To understand Custom Resources, it's helpful to compare them with the standard Kubernetes resources.
        </p>
        <p>
            <b>Standard Kubernetes Resources</b> are the built-in resource types that come with Kubernetes out of the
            box, like Pod,
            Service, Volume, Namespace, Deployment, and so on(<code>kubectl api-resources -o wide</code>).
            They have predefined behavior in the Kubernetes API, and the Kubernetes control plane is aware of how to
            interact with them.
            For example, when you create a <i>Deployment</i>, the Kubernetes API knows that it should create a <i>ReplicaSet</i>,
            and the
            <i>ReplicaSet</i>
            controller knows that it should create <i>Pods</i>.
        </p>
        <p>
            <b>Custom Resources</b> are user-defined extensions to the Kubernetes API. They let you store and manipulate
            additional kinds of
            objects. Custom Resources give you all the power of the Kubernetes API to handle your custom objects.
            For example, you might create a <b>Database</b> custom resource if you are deploying databases via
            Kubernetes and want to
            represent them in your cluster. When you create, update, or delete Custom Resources, you can have a custom
            controller watching
            these events and taking action. This combination of a Custom Resource and a custom controller is often used
            to implement
            Operators in Kubernetes.
        </p>
        <p>
            In summary, while standard resources are predefined resource types with specific behaviors understood by
            Kubernetes, Custom Resources are extensions of the Kubernetes API that you define to represent custom objects, often used in
            conjunction with custom controllers to automate complex application management tasks.
        </p>

    </chapter>

    <chapter title="Operator Pattern" id="operator_pattern">
        <note>While all Operators are controllers, not all controllers are Operators</note>

        <p>
            An <i>Operator</i> is a pattern for extending the Kubernetes API that was developed by CoreOS in 2016. It
            includes one or more custom resources and a controller which manages those resources. The Operator pattern aims to capture the
            key aim of a human operator who is managing a service or set of services. In essence, an Operator is a way of building a custom
            controller and packaging it with the <i>CRDs (Custom Resource Definitions)</i> that the controller watches. It's a higher level concept
            that uses controllers as building blocks.
        </p>
        <p>
            For example, a Prometheus Operator creates, configures, and manages Prometheus monitoring instances. It
            includes a custom resource (the Prometheus server) and a custom controller. The controller watches for changes to Prometheus
            custom resources, then creates, updates, or deletes Prometheus instances as needed.
        </p>
    </chapter>
</topic>