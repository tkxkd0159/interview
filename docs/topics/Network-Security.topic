<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Network Security" id="Network-Security">

    <chapter title="TLS &amp; mTLS" id="tls">
        <img src="$WRS_MODULE$/images/dev/net/tls-1.png" alt="TLS" width="600"/>
        <p>
            TLS is an encryption and authentication protocol designed to secure Internet communications.
            During a TLS handshake, the two communicating sides exchange messages to acknowledge each other, verify each other,
            establish the cryptographic algorithms they will use, and agree on session keys.
        </p>
        <procedure title="TLS Handshake" id="tls_handshake" type="steps">
            <step>
                <b>Client hello:</b> The client sends a client hello message with the protocol version, the client random, and a list of cipher suites.
                Because support for insecure cipher suites has been removed from TLS 1.3, the number of possible cipher suites is vastly reduced.
                The client hello also includes the parameters that will be used for calculating the premaster secret.
                Essentially, the client is assuming that it knows the server’s preferred key exchange method (which, due to the simplified list of cipher suites, it probably does).
                This cuts down the overall length of the handshake — one of the important differences between TLS 1.3 handshakes and TLS 1.0, 1.1, and 1.2 handshakes.
            </step>
            <step>
                <b>Server generates master secret:</b> At this point, the server has received the client random and the client's parameters and cipher suites. 
                It already has the server random, since it can generate that on its own. Therefore, the server can create the master secret.
            </step>
            <step>
                <b>Server hello and "Finished":</b> The server hello includes the server’s certificate, digital signature, server random, and chosen cipher suite.
                Because it already has the master secret, it also sends a "Finished" message.
            </step>
            <step>
                <b>Final steps and client "Finished":</b> Client verifies signature and certificate, generates master secret, and sends "Finished" message.
                Now, Secure symmetric encryption achieved.
            </step>
        </procedure>

        <img src="$WRS_MODULE$/images/dev/net/tls-2.png" alt="TLS" width="600"/>
        <p>
           While TLS and mTLS provide encrypted communication, the primary difference lies in the authentication process.
           In TLS, the client authenticates only the server's identity, whereas in mTLS, both client and server identities are authenticated mutually.
       </p>
        <p>
            Both TLS and mTLS are helpful in different scenarios. For instance, TLS is commonly used in basic web browsing,
            where the user only needs to confirm the server’s identity. On the other hand, mTLS comes in handy when both parties need to validate each other’s identities
            – this is especially important in business-to-business (B2B) data transmissions, connecting cloud services, and high-security applications.
        </p>
        <p>
            At the start of an mTLS session, the server responds by presenting its certificate to the client.
            Then, the client verifies this certificate against a list of trusted certificate authorities.
            If the server’s certificate is valid, the client responds by sending its client certificate, which the server likewise verifies.
            Only after a successful certificate exchange, called a mutual authentication step, does the data transmission occur.
        </p>
    </chapter>
</topic>